@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using LedControleLinuxBlazor.Client.Components.LedGroups
@using LedControleLinuxBlazor.Client.Components.LedState
@using LedControleLinuxBlazor.Client.Components.SplashScreen
@implements IDisposable
@inject IComponentMsgService ComponentMsgService
@inject SplashScreen loadingScreen
@rendermode InteractiveAuto

<PageTitle>SLC V2</PageTitle>
<FluentGrid Spacing="0" Justify="JustifyContent.Center" Style="height: 90vh">
<FluentStack Orientation="Orientation.Vertical" VerticalGap="5">
    <FluentPullToRefresh Style="border: calc(var(--stroke-width)* 1px) solid var(--neutral-stroke-rest); border-radius: calc(var(--control-corner-radius)* 1px); width: 100%;"
                         Disabled="false"
                         Direction="@(PullDirection.Down)"
                         OnRefreshAsync="OnRefreshAsync">


            <LedStateLayout @rendermode="InteractiveAuto"/>
        <LedGroupLayout @rendermode="InteractiveAuto" />

    </FluentPullToRefresh>
</FluentStack>
</FluentGrid>
@code {
    
    private HubConnection? hubConnection;
    private int loadedComponentsCount = 0;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    private bool enabledRefresh = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           hubConnection = await SocketService.StartConnectionAsync();
            ComponentMsgService.ComponentLoaded += HandleComponentLoaded;
           loadingScreen.UpdateScreen("Loading the LED-s");
        }
        
    }

    protected override async Task OnInitializedAsync()
    {
       await loadingScreen.OpenSplashDefaultAsync("Connection the server");
    }

    public void Dispose()
    {
       
    }
    
    private void HandleComponentLoaded(string name)
    {
        switch (name)
        {
            case "LedStateLayout":
                loadingScreen.UpdateScreen("Loading the LED groups");
                loadedComponentsCount++;
                break;
            case "LedGroupLayout":
                loadingScreen.UpdateScreen("Loading the LED groups");
                loadedComponentsCount++;
                break;
        }

        if (loadedComponentsCount >= 2)
        {
#if DEBUG
            Console.WriteLine("Both components are loaded.");
#endif
            loadingScreen.Close();
        }
    }
    private async Task<bool> OnRefreshAsync()
    {
        await ComponentMsgService.RefreshComponent();
        return true;
    }
}
