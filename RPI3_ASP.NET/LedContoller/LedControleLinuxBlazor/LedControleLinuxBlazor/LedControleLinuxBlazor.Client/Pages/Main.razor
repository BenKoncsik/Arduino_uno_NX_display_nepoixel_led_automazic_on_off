@page "/"
@using System.Collections.ObjectModel
@using LedControleLinuxBlazor.Client.Model
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using System.Globalization
@using LedControleLinuxBlazor.Client.Components.LedGroups
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<PageTitle>SLC V2</PageTitle>
<FluentGrid Spacing="0" Justify="JustifyContent.Center" Style="height: 90vh">
<FluentStack Orientation="Orientation.Vertical" VerticalGap="5">
    <FluentPullToRefresh Style="border: calc(var(--stroke-width)* 1px) solid var(--neutral-stroke-rest); border-radius: calc(var(--control-corner-radius)* 1px); width: 100%;"
                         Disabled="false"
                         Direction="@(PullDirection.Down)"
                         OnRefreshAsync="OnRefreshAsync">

        <FluentCard class="mt-4">
            <FluentCardBody>
                @foreach (LEDStateJsonModel led in ledStates)
                {
                    <div class="led-icon" style="background-color: @led.LedColor;" @onclick="() => OpenLedDialog(led)"></div>
                }
            </FluentCardBody>
        </FluentCard>

        @if (selectedLed != null)
        {
            <FluentDialog open=true onDismiss=CloseLedDialog>
                <FluentLayout> 
                    <FluentDialogTitle>
                        <FluentStack Orientation="Orientation.Horizontal">
                            LED @selectedLed.LedNumber
                            <FluentButton OnClick="@CloseLedDialog"><span>&times;</span></FluentButton>
                        </FluentStack>
                    
                    </FluentDialogTitle>
                    <FluentDialogContent>
                        <FluentStack Orientation="Orientation.Vertical">
                            <FluentForm>
                                <FluentFormItem>
                                    <label for="colorPicker">Color:</label>
                                    <input type="color" id="colorPicker" value="@selectedLed.LedColor" @onchange="(e) => SetLedColor(selectedLed, e.Value.ToString())" />
                                </FluentFormItem>
                                <FluentFormItem>
                                    <label for="brightnessRange">Brightness:</label>
                                    <input type="range" id="brightnessRange" class="form-range" min="0" max="1" step="0.01" value="@selectedLed.Brightness.ToString(System.Globalization.CultureInfo.InvariantCulture)" @onchange="(e) => SetLedBrightness(selectedLed, e.Value.ToString())" />
                                </FluentFormItem>
                            </FluentForm>    
                        </FluentStack>
                    
                    </FluentDialogContent>
                </FluentLayout>
            </FluentDialog>
        }

        <LedGroupLayout HubConnection="hubConnection" @rendermode="InteractiveAuto"/>

    </FluentPullToRefresh>
</FluentStack>
</FluentGrid>
@code {
    private ObservableCollection<LEDStateJsonModel> ledStates = new ObservableCollection<LEDStateJsonModel>();
    private HubConnection? hubConnection;
    private SplashScreen loadingScreen;
    private LEDStateJsonModel selectedLed;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    private bool enabledRefresh = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/ledControlHub"))
                .WithAutomaticReconnect()
                .Build();
            loadingScreen.UpdateScreen("Loading the LED-s");
            hubConnection.On<ObservableCollection<LEDStateJsonModel>>("GetLeds", (leds) =>
            {
                InvokeAsync(() =>
                {
                    ledStates = leds;
                    StateHasChanged();
                });
            });

            hubConnection.On<LEDStateJsonModel>("UpdateState", (led) =>
            {
                SetLed(led);
            });

            await hubConnection.StartAsync();
            loadingScreen.UpdateScreen("Load the LED-s");
            LoadLeds();        
        }
        
    }

    protected override async Task OnInitializedAsync()
    {
        loadingScreen = new SplashScreen(DialogService);
        await loadingScreen.OpenSplashDefaultAsync("Connection the server");
    }


    private async void LoadLeds()
    {
        try
        {
            await LoadLedsTask();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"error conection: {ex}");
        }
        finally
        {
            loadingScreen.Close();
            enabledRefresh = true;
        }
    }

    private async Task LoadLedsTask()
    {
        if (hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.InvokeAsync("SendLedStates");
        }
    }

    private void SetLed(LEDStateJsonModel led)
    {
        if (ledStates != null)
        {
            LEDStateJsonModel? oldLed = ledStates.FirstOrDefault(l => l.LedNumber.Equals(led.LedNumber));
            if (oldLed == null)
            {
                ledStates.Add(led);
            }
            else
            {
                oldLed.LedColor = led.LedColor;
                oldLed.Brightness = led.Brightness;
            }
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task SetLedColor(LEDStateJsonModel led, string color)
    {
        led.LedColor = color;
        await hubConnection.InvokeAsync("SettLedState", led);
    }

    private async Task SetLedBrightness(LEDStateJsonModel led, string brightness)
    {
        if (float.TryParse(brightness, NumberStyles.Any, CultureInfo.InvariantCulture, out float brightnessValue))
        {
            led.Brightness = brightnessValue;
        }
        await hubConnection.InvokeAsync("SettLedState", led);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void OpenLedDialog(LEDStateJsonModel led)
    {
        selectedLed = led;
    }

    private void CloseLedDialog()
    {
        selectedLed = null;
    }

    private async Task<bool> OnRefreshAsync()
    {
        await LoadLedsTask();
        return true;
    }
}
