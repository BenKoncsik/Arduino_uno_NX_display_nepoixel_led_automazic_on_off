@using LedControleLinuxBlazor.Client.Model
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.ObjectModel
@using System.Globalization
@using LedControleLinuxBlazor.Client.Components.SplashScreen
@implements IDisposable
@inject SplashScreen loadingScreen
@inject IComponentMsgService ComponentMsgService

<FluentCard class="mt-4">
    <CardHeader>
        Led state
    </CardHeader>
    <FluentCardBody>
        @if (ledStates != null)
        {
            @foreach (LEDStateJsonModel led in ledStates)
            {
                <div class="led-icon" style="background-color: @led.LedColor;" @onclick="() => OpenLedDialog(led)"></div>
            }
        }
    </FluentCardBody>
</FluentCard>

@if (selectedLed != null)
{
    <FluentDialog open=true onDismiss=CloseLedDialog>
        <FluentLayout> 
            <FluentDialogTitle>
                <FluentStack Orientation="Orientation.Horizontal">
                    LED @selectedLed.LedNumber
                    <FluentButton OnClick="@CloseLedDialog"><span>&times;</span></FluentButton>
                </FluentStack>
                    
            </FluentDialogTitle>
            <FluentDialogContent>
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentForm>
                        <FluentFormItem>
                            <label for="colorPicker">Color:</label>
                            <input type="color" id="colorPicker" value="@selectedLed.LedColor" @onchange="(e) => SetLedColor(selectedLed, e.Value.ToString())" />
                        </FluentFormItem>
                        <FluentFormItem>
                            <label for="brightnessRange">Brightness:</label>
                            <input type="range" id="brightnessRange" class="form-range" min="0" max="1" step="0.01" value="@selectedLed.Brightness.ToString(System.Globalization.CultureInfo.InvariantCulture)" @onchange="(e) => SetLedBrightness(selectedLed, e.Value.ToString())" />
                        </FluentFormItem>
                    </FluentForm>    
                </FluentStack>
                    
            </FluentDialogContent>
        </FluentLayout>
    </FluentDialog>
}

@code
{
    [Parameter]
    public EventCallback<Type> OnLoaded { get; set; }
    private ObservableCollection<LEDStateJsonModel> ledStates = new ObservableCollection<LEDStateJsonModel>();
    private HubConnection hubConnection;
    private LEDStateJsonModel selectedLed;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hubConnection = await SocketService.StartConnectionAsync();
            ComponentMsgService.RefreshRequested += RefreshComponent;
            hubConnection.On<ObservableCollection<LEDStateJsonModel>>("GetLeds", (leds) =>
            {
                ledStates.Clear();
                foreach (var led in leds)
                {
                    ledStates.Add(led);
                }
#if DEBUG
                Console.WriteLine($"Led state: {leds[0].LedColor}");
#endif
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<LEDStateJsonModel>("UpdateState", (led) =>
            {
                SetLed(led);
            });
            await LoadLedsTask();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (OnLoaded.HasDelegate)
            {
                OnLoaded.InvokeAsync(typeof(LedStateLayout));
            }
        }
    }
    private async Task LoadLeds()
    {
        try
        {
            loadingScreen.UpdateScreen("Loading the LED-s");
            await LoadLedsTask();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"error conection: {ex}");
        }
        finally
        {
           loadingScreen.UpdateScreen("Load the LED-s");
        }
    }

    private async Task LoadLedsTask()
    {
        if (hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.InvokeAsync("SendLedStates");
        }
    }

    private void SetLed(LEDStateJsonModel led)
    {
        if (ledStates != null)
        {
            LEDStateJsonModel? oldLed = ledStates.FirstOrDefault(l => l.LedNumber.Equals(led.LedNumber));
            if (oldLed == null)
            {
                ledStates.Add(led);
            }
            else
            {
                oldLed.LedColor = led.LedColor;
                oldLed.Brightness = led.Brightness;
            }
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task SetLedColor(LEDStateJsonModel led, string color)
    {
        led.LedColor = color;
        await hubConnection.InvokeAsync("SettLedState", led);
    }

    private async Task SetLedBrightness(LEDStateJsonModel led, string brightness)
    {
        if (float.TryParse(brightness, NumberStyles.Any, CultureInfo.InvariantCulture, out float brightnessValue))
        {
            led.Brightness = brightnessValue;
        }
        await hubConnection.InvokeAsync("SettLedState", led);
    }
    private void OpenLedDialog(LEDStateJsonModel led)
    {
        selectedLed = led;
    }

    private void CloseLedDialog()
    {
        selectedLed = null;
    }
    protected override async Task OnParametersSetAsync()
    {

    }

    private async Task RefreshComponent()
    {
        await LoadLedsTask();
    }

    public void Dispose()
    {
        ComponentMsgService.RefreshRequested -= RefreshComponent;
    }
}