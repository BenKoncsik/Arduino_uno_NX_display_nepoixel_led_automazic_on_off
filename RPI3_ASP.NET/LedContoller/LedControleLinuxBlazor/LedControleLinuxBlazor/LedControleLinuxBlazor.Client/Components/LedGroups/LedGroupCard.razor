@using LedControleLinuxBlazor.Client.Model
@using LedControleLinuxBlazor.Const
@using LedControleLinuxBlazor.Model
<FluentCard>
    <CardHeader>
        <h3>@LedGroup.Name</h3>
        <FluentDivider></FluentDivider>
    </CardHeader>
    <CardBody>
        <div style="display: flex; justify-content: center; width=100%">
            @foreach (var action in LedGroup.LedActions)
            {
                <FluentButton Appearance="Appearance.Accent" OnClick="@(() => HandleAction(action))" 
                    Style="margin: 5px 10px; width: 40%">
                    @action
                </FluentButton>
            }
        </div>
    </CardBody>
</FluentCard>

@code {
    [Parameter]
    public LedGroup LedGroup { get; set; }

    private LedGroup previousLedGroup;

    [Parameter]
    public EventCallback<LedGroupBundle> OnActionClick { get; set; }

    private string buttonPercentage { get; set; } = "100";
    protected override async Task OnParametersSetAsync()
    {
        if (LedGroup != previousLedGroup)
        {
            previousLedGroup = LedGroup;
            buttonPercentage = (100 / LedGroup.LedActions.Count).ToString();
        }
    }
    private async Task HandleAction(string action)
    {
        LedGroupBundle led = new LedGroupBundle(LedGroup);
        led.LedState.LedNumber = -1;
        switch (action)
        {
            case LedActions.ON:
                led.LedState.LedColor = "#FFFFFF";
                led.LedState.Brightness = 100;
                break;
            case LedActions.OFF:
                led.LedState.LedColor = "#000000";
                led.LedState.Brightness = 0;
                break;
        }
        await OnActionClick.InvokeAsync(led);
    }
}
