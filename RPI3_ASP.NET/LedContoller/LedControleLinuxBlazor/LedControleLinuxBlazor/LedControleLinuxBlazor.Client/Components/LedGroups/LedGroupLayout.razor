@using LedControleLinuxBlazor.Client.Model
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.ObjectModel
@using LedControleLinuxBlazor.Client.Components.SplashScreen
@implements IDisposable
@inject IComponentMsgService ComponentMsgService
@inject SplashScreen loadingScreen

<FluentGrid Spacing="4" Justify="JustifyContent.Center" Style="padding: 4px;">
    
    @foreach (LedGroup ledGroup in LedGroups)
    {
        <FluentGridItem xs="12" sm="6" lg="4">
            <LedGroupCard LedGroup="ledGroup" OnActionClick="HandleButtonClicked" />
        </FluentGridItem>
    }
    
</FluentGrid>

@code {
    [Parameter]
    public EventCallback<Type> OnLoaded { get; set; }

    private ObservableCollection<LedGroup> LedGroups { get; set; } = new ObservableCollection<LedGroup>();
    private HubConnection hubConnection;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loadingScreen.UpdateScreen("Load the LED groups");
            hubConnection = await SocketService.StartConnectionAsync();
            ComponentMsgService.RefreshRequested += RefreshComponent;
            hubConnection.On<ObservableCollection<LedGroup>>("GetGroups", (ledGroups) =>
            {
                LedGroups.Clear();
                foreach (var group in ledGroups)
                {
                    LedGroups.Add(group);
                }
                InvokeAsync(StateHasChanged);
            });
            hubConnection.On<LedGroup>("UpdateGroup", (ledGroup) =>
            {
                var group = LedGroups.FirstOrDefault(x => x.GroupState.LedNumber == ledGroup.GroupState.LedNumber);
                if (group != null)
                {
                    group.GroupState.Brightness = ledGroup.GroupState.Brightness;
                    group.GroupState.LedColor = ledGroup.GroupState.LedColor;
                }
                InvokeAsync(StateHasChanged);
            });
            await RefreshComponent();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if(OnLoaded.HasDelegate)
            {
            OnLoaded.InvokeAsync(typeof(LedGroupLayout));
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {

    }
    
    private async Task RefreshComponent()
    {
        await hubConnection.InvokeAsync("SendLedGroups");    
    }

    private async Task HandleButtonClicked(LedGroup action)
    {
        await hubConnection.InvokeAsync("SettLedSates", action);
    }

    public void Dispose()
    {
        ComponentMsgService.RefreshRequested -= RefreshComponent;
    }
}

